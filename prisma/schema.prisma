// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Patient {
  id              String         @id @default(cuid())
  name            String
  email           String
  gender          String
  age             Int
  wallet_address  String         @unique
  profile_picture String?
  blood_group     String?
  appointments    Appointment[]
  prescriptions   Prescription[]
  reports         Report[]
  ratings         Rating[]       // Add this line
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model Doctor {
  id              String         @id @default(cuid())
  doctor_id       String         @unique
  name            String
  email           String
  age             Int
  wallet_address  String         @unique
  profile_picture String?
  hospital        String
  experience      Int
  qualification   String
  bio             String
  location_lat    Float
  location_lng    Float
  available_days  String[]
  available_time  AvailableTime[]
  appointments    Appointment[]
  prescriptions   Prescription[]
  reports         Report[]
  ratings         Rating[]
  average_rating  Float?
  specialties     DoctorSpecialty[]  // Add this line
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model Appointment {
  id                String         @id @default(cuid())
  patient_id        String
  doctor_id         String
  patient           Patient        @relation(fields: [patient_id], references: [id])
  doctor            Doctor         @relation(fields: [doctor_id], references: [id])
  prescriptions     Prescription[]
  reports           Report[]
  date              DateTime
  status            String         // pending, confirmed, cancelled, completed
  appointment_fee   Float
  tx_hash           String?        // Transaction hash from the blockchain
  contract_appointment_id Int?     // Appointment ID from the smart contract
  is_active         Boolean        @default(true)
  amount_paid       Float          
  rating            Rating?        // Add this line
  ticket            Ticket?        // Relation to the ticket
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

model Prescription {
  id             String      @id @default(cuid())
  patient_id     String
  doctor_id      String
  appointment_id String
  patient        Patient     @relation(fields: [patient_id], references: [id])
  doctor         Doctor      @relation(fields: [doctor_id], references: [id])
  appointment    Appointment @relation(fields: [appointment_id], references: [id])
  prescription   String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @default(now())
}

model Report {
  id             String      @id @default(cuid())
  patient_id     String
  doctor_id      String
  appointment_id String
  patient        Patient     @relation(fields: [patient_id], references: [id])
  doctor         Doctor      @relation(fields: [doctor_id], references: [id])
  appointment    Appointment @relation(fields: [appointment_id], references: [id])
  report         String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @default(now())
}

model Rating {
  id             String      @id @default(cuid())
  rating         Int         @default(0)  
  comment        String?
  patient_id     String
  doctor_id      String
  appointment_id String      @unique     // One rating per appointment
  patient        Patient     @relation(fields: [patient_id], references: [id])
  doctor         Doctor      @relation(fields: [doctor_id], references: [id])
  appointment    Appointment @relation(fields: [appointment_id], references: [id])
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @default(now())

  @@index([doctor_id])
  @@index([patient_id])
}

model Specialty {
  id          String            @id @default(cuid())
  name        String           @unique
  slug        String           @unique
  description String?
  icon        String?          // URL or icon name
  doctors     DoctorSpecialty[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model DoctorSpecialty {
  id           String    @id @default(cuid())
  doctor_id    String
  specialty_id String
  doctor       Doctor    @relation(fields: [doctor_id], references: [id])
  specialty    Specialty @relation(fields: [specialty_id], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())

  @@unique([doctor_id, specialty_id])
  @@index([doctor_id])
  @@index([specialty_id])
}

model AvailableTime {
  id          String   @id @default(cuid())
  doctor_id   String
  doctor      Doctor   @relation(fields: [doctor_id], references: [id])
  start_time  String
  end_time    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  @@index([doctor_id])
}

// Add Ticket model
model Ticket {
  id              String      @id @default(cuid())
  ticket_number   String      @unique // Formatted ticket number (e.g., TCK-20240520-001)
  appointment_id  String      @unique // One ticket per appointment
  appointment     Appointment @relation(fields: [appointment_id], references: [id])
  status          String      @default("active") // active, resolved, cancelled
  notes           String?     // Optional notes about the ticket
  qr_code         String?     // URL to QR code image
  expires_at      DateTime    // New field: when the ticket expires
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([ticket_number])
  @@index([appointment_id])
}
